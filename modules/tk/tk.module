<?php
/**
 * @file
 * Code for the Tjenestekatalog feature.
 */

include_once 'tk.features.inc';

/**
 * Implements hook_menu().
 */
function tk_menu() {
  $items['api'] = array(
    'page callback' => 'tk__api_page',
    'access callback' => TRUE,
  );
  $items['api/v1/service'] = array(
    'page callback' => 'tk__api_services',
    'access callback' => TRUE,
  );
  $items['api/v1/service/all'] = array(
    'page callback' => 'tk__api_services_all',
    'access callback' => TRUE,
  );
  $items['api/v1/service/%'] = array(
    'page callback' => 'tk__api_service',
    'access callback' => TRUE,
    'page arguments' => array(3),
  );
  return $items;
}

/**
 * Implements hook_block_info().
 */
function tk_block_info() {
  return array(
    'traffic_light' => array(
      'info' => t('Service status'),
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function tk_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'traffic_light':
      $block['subject'] = "Driftstatus";

      $bad = array();

      $query = new EntityFieldQuery;
      $result = $query
        ->entityCondition('entity_type', 'node')
        ->propertyCondition('type', 'service')
        ->fieldCondition('field_service_status', 'value', 'normal', '!=')
        ->execute();
      if (!empty($result['node'])) {
        $nodes = node_load_multiple(array_keys($result['node']));
        foreach ($nodes as $node) {
          $bad[$node->field_service_status['und'][0]['value']][] = $node;
        }
      }

      if ($bad) {
        $content = array();
        foreach ($bad as $status => $services) {
          $content[$status] = array(
            '#theme' => 'item_list',
            '#title' => $status,
          );
          foreach ($services as $service) {
            $content[$status]['#items'][] = $service->title;
          }
        }
        $block['content'] = $content;
      }
      else {
        $block['content'] = '<div>' . t("Alle tjenester i normal drift") . '</div>';
      }

      break;
  }
  return $block;
}

/**
 * Page callback
 */
function tk__api_page() {
  global $base_url;
  return <<<EOT
<style>
  article {
    margin: 2ex;
  }
  dl {
    margin: 0;
    padding-left: 2ex;
  }
</style>
<article>
  <h2>Tk API</h2>
  <p>Tk is our database of all IT services provided at the University of Bergen.  The data is exposed in
  machine readable formats for all to read.  APIs for updating our data is not yet available.

  <p>The official endpoints are:</p>
  <dl>
    <dt> <a href="/api/v1/service">$base_url/api/v1/service</a>
    <dd>Returns a list of all the services
    <dt> <a href="/api/v1/service/10">$base_url/api/v1/service/&lt;nid></a>
    <dd>Returns all info about the given service.
    <dt> <a href="/api/v1/service/all">$base_url/api/v1/service/all</a>
    <dd>This returns a complete dump all the services and related information such as users and categories.
  </dl>
</article>
EOT;
}



function tk__service_nids() {
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'service')
    //->propertyCondition('status', '1')
    ->propertyOrderBy('title')
    ->execute();
  return empty($result['node']) ? array() : array_keys($result['node']);
}

/**
 * Page callback
 */
function tk__api_services() {
  $title = array();
  $result = db_query('SELECT nid, title FROM {node}');
  foreach ($result as $row) {
    $title[$row->nid] = $row->title;
  }

  $services = array();
  foreach (tk__service_nids() as $nid) {
    $services[] = array(
      'id' => $nid,
      'title' => $title[$nid],
      'href_tk' => url('node/' . $nid, array('absolute' => TRUE)),
      'href_api' => url('api/v1/service/' . $nid, array('absolute' => TRUE)),
    );
  }

  drupal_add_http_header('Access-Control-Allow-Origin', '*');

  return drupal_json_output(array(
    'version' => '0.9',
    'services' => $services,
  ));
}

function tk__service_node_as_obj($node, &$users, &$classes, &$support) {
  $service = array(
    'title' => $node->title,
    'id' => $node->nid,
    'link' => array(
      'href_tk' => url('node/' . $node->nid, array('absolute' => TRUE)),
    ),
    'meta' => array(
      'created' => format_date($node->created, 'custom', 'Y-m-d H:i:s'),
      'changed' => format_date($node->changed, 'custom', 'Y-m-d H:i:s'),
    ),
  );

  //classification
  $TYPE_WEIGHT = array(
    'service_roles' => 10,
    'service_business_levels' => 20,
    'service_classes' => 0,
  );
  if ($node->field_service_classification) {
    $classification = array();
    foreach ($node->field_service_classification['und'] as $v) {
      $tid = $v['target_id'];
      $classification[] = $tid;
      if (!isset($classes[$tid])) {
        $term = taxonomy_term_load($tid);
        $classes[$tid] = array(
          'id' => $tid,
          'title' => $term->name,
          'icon' => isset($term->field_icon_name['und'][0]) ? $term->field_icon_name['und'][0]['value'] : NULL,
          'type' => $term->vocabulary_machine_name,
          'weight' => (int)$term->weight + $TYPE_WEIGHT[$term->vocabulary_machine_name],
        );
      }
    }
    $service['classification'] = implode(' ', $classification);
  }

  // other links
  if ($node->field_home_link['und'][0]) {
    $service['link']['home'] = tk__url($node->field_home_link['und'][0]['url']);
    if ($node->field_home_link['und'][0]['title']) {
      $service['link']['_title_home'] = $node->field_home_link['und'][0]['title'];
    }
  }
  if ($node->field_documentation_link['und'][0]) {
    $service['link']['doc'] = tk__url($node->field_documentation_link['und'][0]['url']);
    if ($node->field_documentation_link['und'][0]['title']) {
      $service['link']['_title_doc'] = $node->field_documentation_link['und'][0]['title'];
    }
  }
  if ($node->field_ros_link['und'][0]) {
    $service['link']['ros'] = tk__url($node->field_ros_link['und'][0]['url']);
  }

  // include the user roles
  $author = user_load($node->uid);
  $service['meta']['author'] = $author->name;
  $users[$author->name] = $author->field_full_name['und'][0]['value'];
  foreach (array('ower_contact', 'operator') as $role) {
    $field = "field_$role";
    $field = $node->$field;
    $role_users = array();
    foreach ($field['und'] as $u) {
      $account = user_load($u['target_id']);
      if ($account) {
        $role_users[$account->name] = TRUE;
        $users[$account->name] = $account->field_full_name['und'][0]['value'];
      }
      else {
        $role_users["unknown_" . $u['target_id']] = TRUE;
      }
    }
    if ($role_users) {
      $fixed_role = $role == 'ower_contact' ? 'owner' : $role;
      ksort($role_users);
      $service['role'][$fixed_role] = implode(' ', array_keys($role_users));
    }
  }

  // text fields
  foreach (array(
    'field_summary',
    'field_description',
    'field_demand',
    //'field_quality',
    'field_field_howto_orde',
    'field_supporting_systems',
    'field_internal_notes',
  )
  as $field) {
    $fv = $node->$field;
    if (isset($fv['und'][0])) {
      $text = $fv['und'][0]['value'];
      $text = str_replace("\r\n", "\n", $text);
      $service['text'][substr($field, 6)] = $text;
    }
  }

  // code fields
  foreach (array(
    'field_availability',
    'field_edit_state',
    'field_service_type',
    'field_cost',
    'field_service_levels',
    'field_user_group',
    'field_service_rotation',
    'field_service_state',
    'field_service_status',
    'field_service_supplier',
    'field_cmdb_id',
    'field_criticality',
    'field_information_class',
  )
  as $field) {
    $fv = $node->$field;
    if (isset($fv['und'][0])) {
      $service['info'][substr($field, 6)] = $fv['und'][0]['value'];
    }
  }

  // node reference fields
  foreach (array(
    'field_service_owner',
    'field_support_contact',
  )
  as $field) {
    $fv = $node->$field;
    if (isset($fv['und'][0])) {
      $tnid = $fv['und'][0]['target_id'];
      $tnode = node_load($tnid);
      $val = array(
        'id' => $tnode->nid,
        'title' => $tnode->title,
      );
      $code = $tnode->field_kode['und'][0]['value'];
      if ($code) {
        $val['code'] = $code;
      }
      $service['related'][substr($field, 6)] = $val;
      if ($field == 'field_support_contact' && !$support[$tnid]) {
        $val['link'] = array('href_tk' => url('node/' . $tnode->nid, array('absolute' => TRUE)));
        foreach (array('field_opening:hours', 'field_phone', 'field_www', 'field_adress:visiting_address') as $tfield) {
          list($tfield, $api_field) = explode(':', $tfield);
          if (!$api_field) {
            $api_field = substr($tfield, 6);
          }
          $tfv = $tnode->$tfield;
          #$val[$tfield] = $tfv;
          if (isset($tfv['und'][0])) {
            if ($tfield == 'field_www') {
              $val['link']['tracker'] = $tfv['und'][0]['url'];
              $val['link']['tracker_title'] = $tfv['und'][0]['title'];
            }
            else {
              # text field
              $text = $tfv['und'][0]['value'];
              $text = str_replace("\r\n", "\n", $text);
              $val[$api_field] = $text;
            }
          }
        }
        $support[$tnid] = $val;
      }
    }
  }

  $flag = array();
  if ($node->promote) {
    $flag[] = 'promote';
  }
  if ($node->status == 0) {
    $flag[] = 'unpublished';
  }
  if (!empty($flag)) {
    $service['flag'] = implode(' ', $flag);
  }

  return $service;
}


/**
 * Page callback
 */
function tk__api_service($nid) {
  $node = node_load($nid);
  $users = array();
  $classes = array();
  $support = array();
  $obj = tk__service_node_as_obj($node, $users, $classes, $support);

  drupal_add_http_header('Access-Control-Allow-Origin', '*');

  ksort($users);
  $obj['user'] = $users;
  $obj['support'] = $support;
  $obj['class'] = $classes;
  $obj['_version'] = '0.9';
  return drupal_json_output($obj);
}

/**
 * Page callback
 */
function tk__api_services_all() {
  $services = array();
  $users = array();
  $classes = array();
  $support = array();

  $nids = tk__service_nids();

  if ($nids) {
    $nodes = node_load_multiple($nids);
    foreach ($nodes as $node) {
      $service = tk__service_node_as_obj($node, $users, $classes, $support);
      $services[(string)$node->nid] = $service;
    }
  }

  unset($users['admin']);
  ksort($users);

  drupal_add_http_header('Access-Control-Allow-Origin', '*');

  return drupal_json_output(array(
    'service' => $services,
    'support' => $support,
    'user' => $users,
    'class' => $classes,
    '_version' => '0.9',
  ));
}

function tk__url($url) {
  if (!strstr($url, ':')) {
    $url = "http://$url";
  }
  return $url;
}

/**
 * Implements hook_entity_view_alter().
 */
function tk_entity_view_alter(&$build, $type) {
  if ($type != 'node')
    return;
  if ($build['#bundle'] != 'service')
    return;
  if (isset($build['field_cmdb_id'])) {
    $cmdb_id = $build['field_cmdb_id']['#items'][0]['value'];
    $build['field_cmdb_id'][0]['#markup'] = "<a href='https://bs.uib.no/?module=cmdb&action=viewt&tjeneste=$cmdb_id'>$cmdb_id</a>";
  }
  foreach (array('field_operator', 'field_ower_contact') as $user_field) {
    if (isset($build[$user_field])) {
      $i = 0;
      while (isset($build[$user_field][$i])) {
        $u = $build[$user_field]['#items'][$i]['entity'];
        $build[$user_field][$i]['#markup'] = l($u->field_full_name['und'][0]['value'], 'http://www.uib.no/user/uib/' . $u->name);
        unset($build[$user_field][$i]['#theme']);
        $i++;
      }
    }
  }
  if (isset($build['field_personal_data'])) {
    $q = new EntityFieldQuery();
    $q->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'gdpr_processing')
      ->propertyCondition('status', NODE_PUBLISHED)
      ->fieldCondition('field_gdpr_service', 'target_id', $build['#node']->nid)
      ;
    $res = $q->execute();
    if (!empty($res['node'])) {
      $build['field_personal_data'][0]['#markup'] .= ': <ul class="gdpr_processing_links">';
      foreach (entity_load('node', array_keys($res['node'])) as $p) {
        $t = $p->title;
        if ($t == $build['#node']->title) {
          $t = "info";
        }
        $build['field_personal_data'][0]['#markup'] .= '<li>' . l($t, '/node/' . $p->nid) . '</li>';
      }
      $build['field_personal_data'][0]['#markup'] .= '</ul>';
    }
    else {
      if ($build['field_personal_data']['#items'][0]['value'] == 'y') {
        # add link to register new processing information
        $build['field_personal_data'][0]['#markup'] .=
          ' <a class="button" href="/node/add/gdpr-processing?field_gdpr_service=' .
          $build['#node']->nid .
          '">⚙️</a>';
      }
    }
  }
}
