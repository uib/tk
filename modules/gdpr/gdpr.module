<?php
/**
 * @file
 * Code for the GDPR feature.
 */

include_once 'gdpr.features.inc';

/**
 * Implements hook_menu().
 */
function gdpr_menu() {
  $items['api/v1/gdpr/processing/all'] = array(
    'page callback' => 'gdpr__api_processing_all',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Implements hook_entity_view_alter().
 */
function gdpr_entity_view_alter(&$build, $type) {
  if ($type != 'node')
    return;
  if ($build['#bundle'] != 'gdpr_processing')
    return;
  foreach (array('field_gdpr_controller_person') as $user_field) {
    if (isset($build[$user_field])) {
      $i = 0;
      while (isset($build[$user_field][$i])) {
        $u = $build[$user_field]['#items'][$i]['entity'];
        $build[$user_field][$i]['#markup'] = l($u->field_full_name['und'][0]['value'], 'http://www.uib.no/user/uib/' . $u->name);
        unset($build[$user_field][$i]['#theme']);
        $i++;
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
 function gdpr_form_gdpr_processing_node_form_alter(&$form, &$form_state, $form_id) {
  $form['title']['#required'] = FALSE;
  $form['title']['#description'] = 'Behandlingens tittel brukes i opplistinger. Knyttes behandlingen til en tjeneste blir tittel satt fra denne.';
  $form['field_gdpr_data_special_type']['#states'] = array(
    'visible' => array(
      ':input[name="field_gdpr_data_special[und]"]' => array('value' => 'y'),
    ),
  );
  $form['field_gdpr_data_special_lawfulne']['#states'] = array(
    'visible' => array(
      ':input[name="field_gdpr_data_special[und]"]' => array('value' => 'y'),
    ),
  );
}

/**
 * Implements hook_node_presave().
 */
function gdpr_node_presave($node) {
  if (empty($node->title)) {
    if (!empty($node->field_gdpr_service['und'])) {
      $service_node = node_load($node->field_gdpr_service['und'][0]['target_id']);
      $node->title = $service_node->title;
    }
    else {
      $cnt = db_query("SELECT count(*) FROM {node} n WHERE n.type = 'gdpr_processing'")->fetchField();
      $cnt++;
      $node->title = "Behandling #$cnt";
    }
  }
}

/**
 * API implementation
 */
function gdpr__api_processing_all() {
  $processing = array();

  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'gdpr_processing')
    //->propertyCondition('status', '1')
    ->propertyOrderBy('title')
    ->execute();

  $nodes = node_load_multiple(array_keys($result['node']));
  foreach ($nodes as $nid => $node) {
    $processing[$nid] = gdpr__processing_node_as_obj($node);
  }

  drupal_add_http_header('Access-Control-Allow-Origin', '*');
  return drupal_json_output(array(
    'processing' => $processing,
    '_version' => '0.9',
  ));
}

function gdpr__processing_node_as_obj($node) {
  $processing = array(
    'title' => $node->title,
    'id' => $node->nid,
    'link' => array(
      'href_tk' => url('node/' . $node->nid, array('absolute' => TRUE)),
    ),
    'meta' => array(
      'created' => format_date($node->created, 'custom', 'Y-m-d H:i:s'),
      'changed' => format_date($node->changed, 'custom', 'Y-m-d H:i:s'),
    ),
  );

  // text fields
  foreach (array(
    'field_gdpr_description',
    'field_gdpr_purpose',
    'field_gdpr_delete_policy',
    'field_gdpr_location',
    'field_gdpr_data_origin',
    'field_gdpr_data_description',
    'field_gdpr_delete_policy',
    'field_gdpr_measures',
    'field_gdpr_access_transfer',
    'field_gdpr_transfer_3rd',
    'field_gdpr_comment',
  )
  as $field) {
    $fv = $node->$field;
    if (isset($fv['und'][0])) {
      $text = $fv['und'][0]['value'];
      $text = str_replace("\r\n", "\n", $text);
      $processing['text'][substr($field, 11)] = $text;
    }
  }

  // "boolean" fields
  foreach (array(
    'field_gdpr_subject_informed',
    'field_gdpr_data_structured',
    'field_gdpr_dpia',
    'field_gdpr_data_special',
    'field_gdpr_processor_contract',
  )
  as $field) {
    $fv = $node->$field;
    if (isset($fv['und'][0])) {
      $val = $fv['und'][0]['value'];
      $val = ($val == '?') ? NULL : ($val == 'y');
      $processing['info'][substr($field, 11)] = $val;
    }
  }

  // multi enum fields
  foreach (array(
    'field_gdpr_lawfulness',
    'field_gdpr_data_special_type',
    'field_gdpr_data_special_lawfulne',
  )
  as $field) {
    $fv = $node->$field;
    if (isset($fv['und'][0])) {
      $processing['info'][substr($field, 11)] =
        implode(' ', array_map(
            function($v) { return $v['value']; },
            $fv['und']
        ));
    }
  }

  // link fields
  foreach (array(
    'field_gdpr_documentation_link',
  )
  as $field) {
    $fv = $node->$field;
    if (isset($fv['und'][0])) {
      $f = substr($field, 11);
      $f = str_replace('_link', '', $f);
      $url = $fv['und'][0]['url'];
      $processing['link'][$f] = $url;
    }
  }

  return $processing;
}
